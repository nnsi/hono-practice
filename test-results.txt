
> test-once
> vitest run


 RUN  v2.1.9 /home/nsi/hono-practice

 ✓ apps/backend/infra/storage/test/r2StorageService.test.ts (9 tests) 11ms
 ✓ apps/backend/feature/r2proxy/test/r2ProxyRoute.test.ts (5 tests) 46ms
 ✓ apps/backend/middleware/test/multipartMiddleware.test.ts (5 tests) 167ms
 ✓ apps/backend/feature/sync/test/syncUsecase.test.ts (7 tests) 34ms
 ✓ apps/backend/feature/sync/test/syncEntity.test.ts (14 tests) 19ms
 ✓ apps/backend/infra/storage/test/localStorageService.test.ts (8 tests) 103ms
 ✓ apps/backend/utils/test/imageValidator.test.ts (10 tests) 18ms
 ✓ apps/backend/utils/timezone.test.ts (11 tests) 21ms
 ✓ apps/backend/domain/task/task.test.ts (3 tests) 11ms
 ✓ apps/backend/feature/auth/test/authUsecase.test.ts (11 tests) 55ms
 ✓ apps/backend/feature/goal/test/goalUsecase.test.ts (7 tests) 22ms
 ✓ apps/backend/feature/apiKey/test/apiKeyUsecase.test.ts (9 tests) 25ms
 ✓ apps/backend/feature/activitygoal/test/activityGoalService.test.ts (5 tests) 30ms
 ✓ apps/backend/feature/sync/test/syncRepository.test.ts (7 tests) 22ms
 ✓ apps/frontend/src/services/sync/test/crypto.test.ts (19 tests) 27ms
 ✓ apps/frontend/src/hooks/feature/csv/useActivityLogValidator.test.ts (23 tests) 64ms
 ✓ apps/backend/feature/subscription/test/subscriptionUsecase.test.ts (7 tests) 9ms
 ✓ apps/backend/feature/activity/test/activityUsecase.test.ts (12 tests) 20ms
 ✓ apps/backend/feature/task/test/taskUsecase.test.ts (20 tests) 18ms
 ✓ apps/frontend/src/services/sync/test/SyncQueue.test.ts (26 tests) 461ms
 ✓ apps/backend/feature/activityLog/test/activityLogUsecase.test.ts (21 tests) 48ms
 ✓ apps/frontend/src/hooks/feature/tasks/test/useTasksPage.test.tsx (16 tests) 732ms
 ✓ apps/frontend/src/providers/test/AuthProvider.TokenProvider.integration.test.tsx (12 tests) 842ms
 ✓ apps/frontend/src/hooks/sync/test/useSyncedTask.test.tsx (15 tests) 346ms
 ✓ apps/frontend/src/hooks/feature/csv/useActivityLogImport.test.ts (9 tests) 463ms
 ✓ apps/frontend/src/utils/test/apiClient.test.ts (14 tests) 408ms
stdout | apps/frontend/src/hooks/api/test/useActivityBatchData.test.tsx > useActivityBatchData > オンライン時にバッチAPIでデータを取得する
batch.$post called

stdout | apps/frontend/src/providers/test/NetworkStatusProvider.SyncManager.integration.test.tsx > NetworkStatusProvider + SyncManager 統合テスト > ネットワーク状態の変化 > オンライン復帰時に保留中のアイテムがある場合、同期を実行する
syncBatch called

 ✓ apps/frontend/src/providers/test/NetworkStatusProvider.SyncManager.integration.test.tsx (11 tests) 663ms
 ✓ apps/frontend/src/hooks/api/test/useActivityBatchData.test.tsx (9 tests) 775ms
 ✓ apps/frontend/src/hooks/sync/test/useSyncedActivityLog.test.tsx (10 tests) 505ms
 ✓ apps/frontend/src/hooks/api/test/useGoals.test.tsx (14 tests) 1125ms
 ✓ apps/frontend/src/hooks/sync/test/useSyncStatusIndicator.test.tsx (23 tests) 173ms
 ✓ apps/frontend/src/hooks/feature/activity/test/useActivityLogCreate.test.tsx (12 tests) 365ms
 ✓ apps/frontend/src/hooks/feature/activity/test/useActivityStats.test.tsx (17 tests) 416ms
 ✓ apps/frontend/src/hooks/feature/csv/useCSVParser.test.ts (11 tests) 181ms
 ✓ apps/frontend/src/hooks/sync/test/useActivityLogSync.test.tsx (9 tests) 180ms
 ✓ apps/backend/feature/subscription/test/subscriptionRoute.test.ts (2 tests) 9254ms
   ✓ GET /subscription - returns subscription for authenticated user 1462ms
   ✓ GET /subscription - returns default free subscription when not found 1095ms
 ✓ apps/frontend/src/hooks/feature/tasks/test/useTaskEditForm.test.tsx (14 tests) 150ms
 ✓ apps/frontend/src/hooks/feature/daily/test/useActivityLogEdit.test.tsx (14 tests) 255ms
 ✓ apps/backend/feature/user/test/userRoute.test.ts (1 test) 8777ms
   ✓ POST user / success 1333ms
 ✓ apps/frontend/src/hooks/feature/activity/test/useActivityEdit.test.tsx (11 tests) 258ms
stdout | apps/backend/feature/sync/test/batchSyncRoute.test.ts > Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > オフラインで作成された複数のTaskを一括登録
Processing task sync: {
  clientId: 'offline-task-1',
  taskId: '00000000-0000-4000-8000-000000000101',
  operation: 'create'
}
Processing task sync: {
  clientId: 'offline-task-2',
  taskId: '00000000-0000-4000-8000-000000000102',
  operation: 'create'
}
Processing task sync: {
  clientId: 'offline-task-3',
  taskId: '00000000-0000-4000-8000-000000000103',
  operation: 'create'
}

 ✓ packages/frontend-shared/hooks/useLongPress.test.ts (13 tests) 231ms
 ✓ apps/frontend/src/hooks/feature/goal/test/useNewGoalPage.test.tsx (15 tests) 682ms
 ✓ apps/frontend/src/components/csv/CSVImportPreview.test.tsx (18 tests) 5082ms
   ✓ CSVImportPreview > 統計情報の表示 > 正常なログの統計を表示する 612ms
   ✓ CSVImportPreview > 統計情報の表示 > エラーと警告を含むログの統計を表示する 376ms
   ✓ CSVImportPreview > 編集機能 > 日付フィールドを編集できる 325ms
   ✓ CSVImportPreview > 行の選択と削除 > 個別の行を選択できる 470ms
   ✓ CSVImportPreview > 行の選択と削除 > 全ての行を選択できる 319ms
   ✓ CSVImportPreview > 行の選択と削除 > 選択した行を削除できる 509ms
   ✓ CSVImportPreview > フィルタリング > エラーのみ表示フィルターが機能する 339ms
   ✓ CSVImportPreview > インポート実行 > 正常なログのみインポートできる 330ms
 ✓ apps/frontend/src/hooks/sync/test/useSyncedMutation.test.tsx (9 tests) 417ms
 ❯ apps/frontend/src/hooks/test/useTimer.test.tsx (15 tests | 12 failed) 164ms
   × useTimer > タイマー操作 > startでタイマーが開始される 27ms
     → expected false to be true // Object.is equality
   × useTimer > タイマー操作 > stopでタイマーが停止される 24ms
     → expected +0 to be 5 // Object.is equality
   × useTimer > 時間の計測 > 経過時間が正しく更新される 11ms
     → expected +0 to be 1 // Object.is equality
   × useTimer > フォーマット > 1時間未満の場合、分:秒形式で表示される 9ms
     → expected '0:00' to be '2:05' // Object.is equality
   × useTimer > フォーマット > 1時間以上の場合、時:分:秒形式で表示される 11ms
     → expected '0:00' to be '1:02:05' // Object.is equality
   × useTimer > localStorage永続化 > 実行中のタイマーがlocalStorageから復元される 6ms
     → expected false to be true // Object.is equality
   × useTimer > タブ間同期 > 他のタブでタイマーが開始されたときに通知される 9ms
     → expected "spy" to be called with arguments: [ Array(1) ]

Received: 



Number of calls: 0

   × useTimer > 複数タイマーの制限 > 他のアクティビティでタイマーが実行中の場合、開始できない 5ms
     → expected "spy" to be called with arguments: [ { title: '別のタイマーが実行中', …(2) } ]

Received: 



Number of calls: 0

   × useTimer > 複数タイマーの制限 > 同じアクティビティのタイマーは開始できる 5ms
     → expected false to be true // Object.is equality
   × useTimer > 一時停止と再開 > 停止したタイマーを再開すると経過時間が保持される 4ms
     → expected +0 to be 5 // Object.is equality
   × useTimer > クリーンアップ > アンマウント時にintervalがクリアされる 5ms
     → expected "clearInterval" to be called at least once
   × useTimer > クリーンアップ > アンマウント時にstorageイベントリスナーが削除される 4ms
     → expected "spy" to be called with arguments: [ 'storage', Any<Function> ]

Received: 



Number of calls: 0

 ✓ apps/frontend/src/hooks/feature/activity/test/useActivityRegistPage.test.tsx (11 tests) 177ms
 ✓ apps/frontend/src/hooks/feature/setting/test/useUserSettings.test.tsx (12 tests) 180ms
 ✓ apps/frontend/src/hooks/feature/activity/test/useActivityCalendar.test.tsx (17 tests) 160ms
 ✓ packages/frontend-shared/hooks/useTimer.test.ts (10 tests) 300ms
 ✓ apps/frontend/src/hooks/feature/root/test/useCreateUser.test.tsx (11 tests) 149ms
 ✓ apps/frontend/src/hooks/api/apiKey/test/useApiKeys.test.tsx (10 tests) 764ms
stdout | apps/backend/feature/sync/test/batchSyncRoute.test.ts > Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > コンフリクト解決シナリオ（サーバー側に既存データがある場合）
Processing task sync: {
  clientId: 'update-task-1',
  taskId: '00000000-0000-4000-8000-000000000401',
  operation: 'update'
}

 ✓ apps/frontend/src/hooks/test/useNetworkStatus.test.tsx (12 tests) 223ms
 ✓ apps/frontend/src/providers/test/AppProviders.test.tsx (11 tests) 249ms
stdout | apps/backend/feature/sync/test/batchSyncRoute.test.ts > Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > 成功と失敗が混在するケース
Processing task sync: {
  clientId: 'success-task-1',
  taskId: '00000000-0000-4000-8000-000000000501',
  operation: 'create'
}
Processing task sync: {
  clientId: 'success-task-2',
  taskId: '00000000-0000-4000-8000-000000000503',
  operation: 'create'
}

 ✓ apps/backend/feature/activityLog/test/activityLogRoute.test.ts (5 tests) 13204ms
   ✓ GET activityLogs / success 1417ms
   ✓ GET activityLogs/:id / success 1427ms
   ✓ POST activityLogs / success 1105ms
   ✓ PUT activityLogs/:id / success 908ms
   ✓ DELETE activityLogs/:id / success 918ms
 ✓ apps/backend/feature/apiKey/test/apiKeyRoute.test.ts (5 tests) 13494ms
   ✓ GET /api-keys - should return list of API keys 1053ms
   ✓ POST /api-keys - should create a new API key 1167ms
   ✓ DELETE /api-keys/:id - should delete an API key 1480ms
   ✓ POST /api-keys - should validate name field 1013ms
   ✓ DELETE /api-keys/:id - should return 404 for non-existent API key 971ms
 ✓ apps/frontend/src/hooks/feature/tasks/test/useTaskGroup.test.ts (13 tests) 100ms
 ✓ packages/frontend-shared/hooks/useGlobalDate.test.ts (13 tests) 153ms
 ✓ apps/frontend/src/hooks/feature/tasks/test/useTaskActions.test.ts (14 tests) 91ms
 ✓ apps/frontend/src/hooks/sync/test/useSyncStatus.test.tsx (10 tests) 106ms
 ✓ apps/frontend/src/hooks/feature/daily/test/useDailyPage.test.tsx (10 tests) 295ms
 ✓ apps/frontend/src/hooks/sync/test/useOfflineBanner.test.tsx (10 tests) 84ms
stdout | apps/backend/feature/sync/test/batchSyncRoute.test.ts > Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > 実際のアプリフロー：オフライン→オンライン復帰時の同期
Processing task sync: {
  clientId: 'offline-op-3',
  taskId: '00000000-0000-4000-8000-000000000703',
  operation: 'create'
}
Processing task sync: {
  clientId: 'offline-op-4',
  taskId: '00000000-0000-4000-8000-000000000601',
  operation: 'update'
}
Offline sync results: [
  {
    "clientId": "offline-op-1",
    "serverId": "00000000-0000-4000-8000-000000000701",
    "status": "success",
    "payload": {
      "id": "00000000-0000-4000-8000-000000000701",
      "userId": "00000000-0000-4000-8000-000000000000",
      "name": "水泳",
      "label": null,
      "emoji": "🏊",
      "iconType": "emoji",
      "iconUrl": null,
      "iconThumbnailUrl": null,
      "description": "プールでの水泳",
      "quantityUnit": "m",
      "orderIndex": "2",
      "kinds": [],
      "showCombinedStats": false,
      "type": "persisted",
      "createdAt": "2025-07-30T23:57:55.138Z",
      "updatedAt": "2025-07-30T23:57:55.138Z"
    }
  },
  {
    "clientId": "offline-op-2",
    "serverId": "00000000-0000-4000-8000-000000000702",
    "status": "success",
    "payload": {
      "id": "00000000-0000-4000-8000-000000000702",
      "userId": "00000000-0000-4000-8000-000000000000",
      "activity": {
        "id": "00000000-0000-4000-8000-000000000701",
        "userId": "00000000-0000-4000-8000-000000000000",
        "name": "水泳",
        "label": "",
        "emoji": "🏊",
        "iconType": "emoji",
        "iconUrl": null,
        "iconThumbnailUrl": null,
        "description": "プールでの水泳",
        "quantityUnit": "m",
        "orderIndex": "2",
        "kinds": [],
        "showCombinedStats": false,
        "type": "persisted",
        "createdAt": "2025-07-30T23:57:55.138Z",
        "updatedAt": "2025-07-30T23:57:55.138Z"
      },
      "activityKind": null,
      "quantity": 500,
      "memo": "初めての水泳、500m完泳！",
      "date": "2024-01-15",
      "type": "persisted",
      "createdAt": "2025-07-30T23:57:55.150Z",
      "updatedAt": "2025-07-30T23:57:55.150Z"
    }
  },
  {
    "clientId": "offline-op-3",
    "serverId": "00000000-0000-4000-8000-000000000703",
    "status": "success",
    "payload": {
      "id": "00000000-0000-4000-8000-000000000703",
      "userId": "00000000-0000-4000-8000-000000000000",
      "title": "水着を買う",
      "memo": "次回の水泳のために新しい水着が必要",
      "startDate": null,
      "dueDate": null,
      "doneDate": null,
      "archivedAt": null,
      "type": "persisted",
      "createdAt": "2025-07-30T23:57:55.168Z",
      "updatedAt": "2025-07-30T23:57:55.168Z"
    }
  },
  {
    "clientId": "offline-op-4",
    "status": "success",
    "payload": {
      "id": "00000000-0000-4000-8000-000000000601",
      "userId": "00000000-0000-4000-8000-000000000000",
      "title": "朝のストレッチ",
      "memo": "毎日の習慣",
      "startDate": null,
      "dueDate": null,
      "doneDate": "2024-01-15",
      "archivedAt": null,
      "type": "persisted",
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2025-07-30T23:57:55.181Z"
    }
  }
]

 ✓ apps/frontend/src/utils/test/queryParams.test.ts (8 tests) 30ms
 ✓ apps/backend/feature/sync/test/batchSyncRoute.test.ts (5 tests) 14270ms
   ✓ Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > オフラインで作成された複数のTaskを一括登録 1519ms
   ✓ Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > ActivityとActivityLogを同時に同期（運動記録のユースケース） 1388ms
   ✓ Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > コンフリクト解決シナリオ（サーバー側に既存データがある場合） 978ms
   ✓ Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > 成功と失敗が混在するケース 981ms
   ✓ Batch Sync API Real-world Scenarios > POST /sync/batch - Real-world Use Cases > 実際のアプリフロー：オフライン→オンライン復帰時の同期 914ms
 ✓ apps/frontend/src/hooks/feature/daily/test/useDailyActivityCreate.test.tsx (8 tests) 77ms
 ✓ apps/backend/feature/goal/test/goalRoute.test.ts (6 tests) 14733ms
   ✓ GET goals / success 1185ms
   ✓ GET goals / with activity filter 1496ms
   ✓ POST goals / success 1040ms
   ✓ GET goals/:id / success 990ms
   ✓ PUT goals/:id / success 898ms
   ✓ DELETE goals/:id / success 888ms
 ✓ apps/frontend/src/hooks/feature/auth/test/useAuthInitializer.test.tsx (11 tests) 256ms
 ✓ apps/frontend/src/hooks/feature/login/test/useLogin.test.tsx (10 tests) 202ms
 ✓ apps/frontend/src/hooks/api/test/useSubscription.test.tsx (8 tests) 570ms
 ✓ apps/backend/feature/sync/test/syncRoute.test.ts (7 tests) 15363ms
   ✓ Sync API Routes > POST /sync/check-duplicates > 重複チェックを実行できる 1212ms
   ✓ Sync API Routes > POST /sync/check-duplicates > 不正なリクエストボディの場合は400エラー 1458ms
   ✓ Sync API Routes > GET /sync/status > 同期状況を取得できる 1018ms
   ✓ Sync API Routes > POST /sync/enqueue > 同期操作をエンキューできる 949ms
   ✓ Sync API Routes > POST /sync/enqueue > 不正な操作タイプの場合は400エラー 903ms
   ✓ Sync API Routes > POST /sync/process > 同期キューを処理できる 833ms
   ✓ Sync API Routes > POST /sync/process > バッチサイズの上限を超える場合は400エラー 995ms
 ✓ packages/frontend-shared/hooks/useNetworkStatus.test.ts (9 tests) 142ms
 ✓ apps/frontend/src/utils/test/timeUtils.test.ts (22 tests) 26ms
 ✓ packages/frontend-shared/adapters/notification.test.ts (7 tests) 32ms
 ✓ apps/frontend/src/utils/test/mutationParams.test.tsx (8 tests) 119ms
 ✓ apps/frontend/src/hooks/feature/daily/test/useDailyTaskActions.test.tsx (6 tests) 113ms
 ✓ apps/frontend/src/hooks/api/test/useActivities.test.tsx (6 tests) 502ms
 ✓ apps/backend/feature/task/test/taskRoute.test.ts (8 tests) 16284ms
   ✓ GET tasks / success 1376ms
   ✓ GET tasks/:id / success 1413ms
   ✓ POST task / success 1788ms
   ✓ PUT tasks/:id / success 963ms
   ✓ DELETE tasks/:id / success 901ms
   ✓ GET tasks / with valid date query 791ms
   ✓ GET tasks/archived / success 904ms
   ✓ POST tasks/:id/archive / success 1054ms
 ✓ apps/frontend/src/hooks/test/useLongPress.test.tsx (8 tests) 85ms
 ✓ packages/frontend-shared/adapters/network.test.ts (5 tests) 37ms
 ✓ apps/frontend/src/hooks/test/useAuth.test.tsx (8 tests) 67ms
 ✓ packages/frontend-shared/adapters/storage.test.ts (10 tests) 27ms
 ✓ packages/frontend-shared/adapters/eventbus.test.ts (8 tests) 11ms
 ✓ apps/frontend/src/hooks/feature/setting/test/useAppSettings.test.tsx (9 tests) 88ms
 ✓ packages/frontend-shared/adapters/timer.test.ts (4 tests) 10ms
 ✓ apps/frontend/src/hooks/test/useGlobalDate.test.tsx (3 tests) 28ms
 ✓ apps/frontend/src/utils/test/cn.test.ts (10 tests) 9ms
 ✓ apps/backend/feature/activity/test/activityRoute.test.ts (11 tests) 17369ms
   ✓ GET activities / success 1648ms
   ✓ GET activities/:id / success 1304ms
   ✓ POST activities / success 1549ms
   ✓ PUT activities/:id / success 1028ms
   ✓ DELETE activities/:id / success 1031ms
   ✓ POST activities/:id/icon / success 899ms
   ✓ POST activities/:id/icon / file too large 1332ms
   ✓ POST activities/:id/icon / invalid file type 948ms
   ✓ POST activities/:id/icon / activity not found 434ms
 ✓ apps/backend/feature/auth/test/authRoute.test.ts (24 tests | 1 skipped) 19767ms
   ✓ AuthRoute Integration Tests > POST /login > 正常系：ログイン成功 1435ms
   ✓ AuthRoute Integration Tests > POST /login > 異常系：認証エラー (wrong password) 1516ms
   ✓ AuthRoute Integration Tests > POST /login > 異常系：認証エラー (user not found) 977ms
   ✓ AuthRoute Integration Tests > POST /login > 異常系：リクエストボディが不正 (missing password) 1117ms
   ✓ AuthRoute Integration Tests > POST /login > 異常系：極端に長いログインID (バリデーション未実装) 1034ms
   ✓ AuthRoute Integration Tests > POST /token > 正常系：トークンの更新成功 1057ms
   ✓ AuthRoute Integration Tests > POST /token > 異常系：リフレッシュトークンが無効 (not found) 1120ms
   ✓ AuthRoute Integration Tests > POST /token > 異常系：リフレッシュトークンが無効 (revoked) 519ms

 Test Files  1 failed | 86 passed (87)
      Tests  12 failed | 923 passed | 1 skipped (936)
   Start at  08:57:36
   Duration  23.54s (transform 16.03s, setup 0ms, collect 99.85s, tests 163.62s, environment 63.96s, prepare 16.39s)

