/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TaskImport } from './routes/task'
import { Route as ProfileImport } from './routes/profile'
import { Route as GoalImport } from './routes/goal'
import { Route as ActivityImport } from './routes/activity'
import { Route as IndexImport } from './routes/index'
import { Route as TaskIdImport } from './routes/task/$id'
import { Route as ActivitySettingImport } from './routes/activity/setting'
import { Route as ActivityIdImport } from './routes/activity/$id'

// Create/Update Routes

const TaskRoute = TaskImport.update({
  id: '/task',
  path: '/task',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const GoalRoute = GoalImport.update({
  id: '/goal',
  path: '/goal',
  getParentRoute: () => rootRoute,
} as any)

const ActivityRoute = ActivityImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIdRoute = TaskIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TaskRoute,
} as any)

const ActivitySettingRoute = ActivitySettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => ActivityRoute,
} as any)

const ActivityIdRoute = ActivityIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ActivityRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/activity': {
      id: '/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof ActivityImport
      parentRoute: typeof rootRoute
    }
    '/goal': {
      id: '/goal'
      path: '/goal'
      fullPath: '/goal'
      preLoaderRoute: typeof GoalImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/task': {
      id: '/task'
      path: '/task'
      fullPath: '/task'
      preLoaderRoute: typeof TaskImport
      parentRoute: typeof rootRoute
    }
    '/activity/$id': {
      id: '/activity/$id'
      path: '/$id'
      fullPath: '/activity/$id'
      preLoaderRoute: typeof ActivityIdImport
      parentRoute: typeof ActivityImport
    }
    '/activity/setting': {
      id: '/activity/setting'
      path: '/setting'
      fullPath: '/activity/setting'
      preLoaderRoute: typeof ActivitySettingImport
      parentRoute: typeof ActivityImport
    }
    '/task/$id': {
      id: '/task/$id'
      path: '/$id'
      fullPath: '/task/$id'
      preLoaderRoute: typeof TaskIdImport
      parentRoute: typeof TaskImport
    }
  }
}

// Create and export the route tree

interface ActivityRouteChildren {
  ActivityIdRoute: typeof ActivityIdRoute
  ActivitySettingRoute: typeof ActivitySettingRoute
}

const ActivityRouteChildren: ActivityRouteChildren = {
  ActivityIdRoute: ActivityIdRoute,
  ActivitySettingRoute: ActivitySettingRoute,
}

const ActivityRouteWithChildren = ActivityRoute._addFileChildren(
  ActivityRouteChildren,
)

interface TaskRouteChildren {
  TaskIdRoute: typeof TaskIdRoute
}

const TaskRouteChildren: TaskRouteChildren = {
  TaskIdRoute: TaskIdRoute,
}

const TaskRouteWithChildren = TaskRoute._addFileChildren(TaskRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activity': typeof ActivityRouteWithChildren
  '/goal': typeof GoalRoute
  '/profile': typeof ProfileRoute
  '/task': typeof TaskRouteWithChildren
  '/activity/$id': typeof ActivityIdRoute
  '/activity/setting': typeof ActivitySettingRoute
  '/task/$id': typeof TaskIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activity': typeof ActivityRouteWithChildren
  '/goal': typeof GoalRoute
  '/profile': typeof ProfileRoute
  '/task': typeof TaskRouteWithChildren
  '/activity/$id': typeof ActivityIdRoute
  '/activity/setting': typeof ActivitySettingRoute
  '/task/$id': typeof TaskIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/activity': typeof ActivityRouteWithChildren
  '/goal': typeof GoalRoute
  '/profile': typeof ProfileRoute
  '/task': typeof TaskRouteWithChildren
  '/activity/$id': typeof ActivityIdRoute
  '/activity/setting': typeof ActivitySettingRoute
  '/task/$id': typeof TaskIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/activity'
    | '/goal'
    | '/profile'
    | '/task'
    | '/activity/$id'
    | '/activity/setting'
    | '/task/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/activity'
    | '/goal'
    | '/profile'
    | '/task'
    | '/activity/$id'
    | '/activity/setting'
    | '/task/$id'
  id:
    | '__root__'
    | '/'
    | '/activity'
    | '/goal'
    | '/profile'
    | '/task'
    | '/activity/$id'
    | '/activity/setting'
    | '/task/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivityRoute: typeof ActivityRouteWithChildren
  GoalRoute: typeof GoalRoute
  ProfileRoute: typeof ProfileRoute
  TaskRoute: typeof TaskRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivityRoute: ActivityRouteWithChildren,
  GoalRoute: GoalRoute,
  ProfileRoute: ProfileRoute,
  TaskRoute: TaskRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/activity",
        "/goal",
        "/profile",
        "/task"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/activity": {
      "filePath": "activity.tsx",
      "children": [
        "/activity/$id",
        "/activity/setting"
      ]
    },
    "/goal": {
      "filePath": "goal.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/task": {
      "filePath": "task.tsx",
      "children": [
        "/task/$id"
      ]
    },
    "/activity/$id": {
      "filePath": "activity/$id.tsx",
      "parent": "/activity"
    },
    "/activity/setting": {
      "filePath": "activity/setting.tsx",
      "parent": "/activity"
    },
    "/task/$id": {
      "filePath": "task/$id.tsx",
      "parent": "/task"
    }
  }
}
ROUTE_MANIFEST_END */
