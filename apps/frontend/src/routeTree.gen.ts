/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TaskImport } from './routes/task'
import { Route as SettingImport } from './routes/setting'
import { Route as IndexImport } from './routes/index'
import { Route as TaskIdImport } from './routes/task/$id'
import { Route as ActivityStatsImport } from './routes/activity/stats'
import { Route as ActivityDailyImport } from './routes/activity/daily'

// Create/Update Routes

const TaskRoute = TaskImport.update({
  id: '/task',
  path: '/task',
  getParentRoute: () => rootRoute,
} as any)

const SettingRoute = SettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TaskIdRoute = TaskIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => TaskRoute,
} as any)

const ActivityStatsRoute = ActivityStatsImport.update({
  id: '/activity/stats',
  path: '/activity/stats',
  getParentRoute: () => rootRoute,
} as any)

const ActivityDailyRoute = ActivityDailyImport.update({
  id: '/activity/daily',
  path: '/activity/daily',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/setting': {
      id: '/setting'
      path: '/setting'
      fullPath: '/setting'
      preLoaderRoute: typeof SettingImport
      parentRoute: typeof rootRoute
    }
    '/task': {
      id: '/task'
      path: '/task'
      fullPath: '/task'
      preLoaderRoute: typeof TaskImport
      parentRoute: typeof rootRoute
    }
    '/activity/daily': {
      id: '/activity/daily'
      path: '/activity/daily'
      fullPath: '/activity/daily'
      preLoaderRoute: typeof ActivityDailyImport
      parentRoute: typeof rootRoute
    }
    '/activity/stats': {
      id: '/activity/stats'
      path: '/activity/stats'
      fullPath: '/activity/stats'
      preLoaderRoute: typeof ActivityStatsImport
      parentRoute: typeof rootRoute
    }
    '/task/$id': {
      id: '/task/$id'
      path: '/$id'
      fullPath: '/task/$id'
      preLoaderRoute: typeof TaskIdImport
      parentRoute: typeof TaskImport
    }
  }
}

// Create and export the route tree

interface TaskRouteChildren {
  TaskIdRoute: typeof TaskIdRoute
}

const TaskRouteChildren: TaskRouteChildren = {
  TaskIdRoute: TaskIdRoute,
}

const TaskRouteWithChildren = TaskRoute._addFileChildren(TaskRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/setting': typeof SettingRoute
  '/task': typeof TaskRouteWithChildren
  '/activity/daily': typeof ActivityDailyRoute
  '/activity/stats': typeof ActivityStatsRoute
  '/task/$id': typeof TaskIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/setting': typeof SettingRoute
  '/task': typeof TaskRouteWithChildren
  '/activity/daily': typeof ActivityDailyRoute
  '/activity/stats': typeof ActivityStatsRoute
  '/task/$id': typeof TaskIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/setting': typeof SettingRoute
  '/task': typeof TaskRouteWithChildren
  '/activity/daily': typeof ActivityDailyRoute
  '/activity/stats': typeof ActivityStatsRoute
  '/task/$id': typeof TaskIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/setting'
    | '/task'
    | '/activity/daily'
    | '/activity/stats'
    | '/task/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/setting'
    | '/task'
    | '/activity/daily'
    | '/activity/stats'
    | '/task/$id'
  id:
    | '__root__'
    | '/'
    | '/setting'
    | '/task'
    | '/activity/daily'
    | '/activity/stats'
    | '/task/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SettingRoute: typeof SettingRoute
  TaskRoute: typeof TaskRouteWithChildren
  ActivityDailyRoute: typeof ActivityDailyRoute
  ActivityStatsRoute: typeof ActivityStatsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SettingRoute: SettingRoute,
  TaskRoute: TaskRouteWithChildren,
  ActivityDailyRoute: ActivityDailyRoute,
  ActivityStatsRoute: ActivityStatsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/setting",
        "/task",
        "/activity/daily",
        "/activity/stats"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/setting": {
      "filePath": "setting.tsx"
    },
    "/task": {
      "filePath": "task.tsx",
      "children": [
        "/task/$id"
      ]
    },
    "/activity/daily": {
      "filePath": "activity/daily.tsx"
    },
    "/activity/stats": {
      "filePath": "activity/stats.tsx"
    },
    "/task/$id": {
      "filePath": "task/$id.tsx",
      "parent": "/task"
    }
  }
}
ROUTE_MANIFEST_END */
