# プロジェクト概要

## プロジェクト構造(バックエンド)

```txt
apps/backend/
├── domain/         # ドメインモデル層
│   ├── activity/     # アクティビティ関連ドメイン
│   ├── auth/        # 認証関連ドメイン
│   ├── goal/        # 目標管理ドメイン
│   ├── task/        # タスク管理ドメイン
│   └── user/        # ユーザー管理ドメイン
│
├── feature/        # routing(DI)/handler/usecase/repository
│   ├── activity/    # アクティビティ機能
│   ├── auth/       # 認証機能
│   ├── goal/       # 目標管理機能
│   ├── task/       # タスク管理機能
│   └── user/       # ユーザー管理機能
│
├── infra/          # インフラ層
│   ├── db.ts       # データベース接続
│   └── drizzle/   # ORM設定
│
├── error/          # カスタムエラー定義
├── middleware/     # Honoミドルウェア
├── lib/            # 共通ユーティリティ
└── app.ts          # アプリケーションエントリ
```

## 設計・実装の特徴

### アーキテクチャ

- **レイヤードアーキテクチャ**を採用
  - ドメイン層:ビジネスロジックの純粋な実装
  - ユースケース層:アプリケーション固有の処理フロー
  - インフラ層:外部サービスとの連携

### 主要技術

- **Honoフレームワーク**:高速なルーティングとミドルウェアサポート
- **Drizzle ORM**:型安全なSQLクエリビルダー
- **Zod**:リクエストバリデーション
- **Vitest**:テストフレームワーク

### ドメイン駆動設計

- 値オブジェクトパターン(例:`ActivityId.ts`)
- リポジトリパターン(例:`activityRepository.ts`)
- ドメインイベント管理(`activityLog`関連)

### エラーハンドリング

- カスタムエラークラス階層(`appError.ts`)
- エラー種別ごとのHTTPステータスマッピング
- グローバルエラーハンドラ(`honoWithErrorHandling.ts`)

### トランザクション管理

- Drizzleのトランザクションラッパー(`drizzleTransaction.ts`)
- ユースケース単位でのACID特性保証
- リトライメカニズム(SQL実行エラー時)

### テスト戦略

- テストピラミッドに基づく多層テスト
- モック実装(`mockAuthMiddleware.ts`)
- 統合テスト用DBセットアップ(`test.setup.ts`)
- テストカバレッジレポート(Vitest組み込み)
